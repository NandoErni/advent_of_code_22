print("Part one:", [[[([((rock[i][0] == rock[i + 1][0]) and [(cave[l].pop(rock[i][0]), cave[l].insert(rock[i][0], '#')) for l in max([list(range(rock[i][1], rock[i + 1][1] + 1)), list(range(rock[i + 1][1], rock[i][1] + 1))])], (rock[i][1] == rock[i + 1][1]) and [(cave[rock[i][1]].pop(l), cave[rock[i][1]].insert(l, '#')) for l in max([list(range(rock[i][0], rock[i + 1][0] + 1)), list(range(rock[i + 1][0], rock[i][0] + 1))])]) for rock in rocks for i in range(len(rock) - 1)], [([([(not early_return and cave[current_position[1]+1][current_position[0]] != '#') and (current_position.insert(1, current_position.pop(1) + 1), current_position[1] == abyss_starts_at and early_return.append(len(counter))) for _ in range(abyss_starts_at+3)], ((not early_return and cave[current_position[1] + 1][current_position[0] - 1] != '#') and ((current_position.insert(1, current_position.pop(1) + 1), current_position.insert(0, current_position.pop(0) - 1)) or True)) or (((not early_return and cave[current_position[1]+1][current_position[0]+1] != '#') and ((current_position.insert(1, current_position.pop(1) + 1), current_position.insert(0, current_position.pop(0) + 1)), True)) or (((not early_return) and ((cave[current_position[1]].pop(current_position[0]), cave[current_position[1]].insert(current_position[0], '#'), current_position.pop(0), current_position.insert(0, 500), current_position.pop(1), current_position.insert(1, 0), counter.append('Yobama')) or True))))) for _ in range((abyss_starts_at * 2000))], (early_return and early_return[-1]) or len(counter))[-1] for current_position, counter, early_return in [([500 , 0], list(), list())]][0])[-1] for cave in [[([((x == 0) and caver.append([]), ((y == 0 and x == 500) and caver[-1].append('+')) or caver[-1].append('.')) for y in range(abyss_starts_at+1) for x in range(2000)], caver)[-1] for caver in [[]]][0]]][0] for abyss_starts_at in [max([j[1] for i in rocks for j in i]) + 1]][0] for rocks in [[[(int(coords.split(",")[0]), int(coords.split(",")[1])) for coords in row.split(" -> ")] for row in open("input.txt", "r").read().split("\n")]]][0])
print("Part two:", [[[([((rock[i][0] == rock[i + 1][0]) and [(cave[l].pop(rock[i][0]), cave[l].insert(rock[i][0], '#')) for l in max([list(range(rock[i][1], rock[i + 1][1] + 1)), list(range(rock[i + 1][1], rock[i][1] + 1))])], (rock[i][1] == rock[i + 1][1]) and [(cave[rock[i][1]].pop(l), cave[rock[i][1]].insert(l, '#')) for l in max([list(range(rock[i][0], rock[i + 1][0] + 1)), list(range(rock[i + 1][0], rock[i][0] + 1))])]) for rock in rocks for i in range(len(rock) - 1)], cave.insert(abyss_starts_at+1, ['#' for i in range(2000)]), [([(not early_return) and ([(cave[current_position[1]+1][current_position[0]] != '#') and current_position.insert(1, current_position.pop(1) + 1) for _ in range(abyss_starts_at+3)], ((cave[current_position[1] + 1][current_position[0] - 1] != '#') and ((current_position.insert(1, current_position.pop(1) + 1), current_position.insert(0, current_position.pop(0) - 1)) or True)) or (((cave[current_position[1]+1][current_position[0]+1] != '#') and ((current_position.insert(1, current_position.pop(1) + 1), current_position.insert(0, current_position.pop(0) + 1)) or True)) or ((cave[current_position[1]].pop(current_position[0]), cave[current_position[1]].insert(current_position[0], '#'), (current_position == [500 , 0]) and early_return.append(len(counter) + 1), current_position.pop(0), current_position.insert(0, 500), current_position.pop(1), current_position.insert(1, 0), counter.append(""))))) for _ in range((abyss_starts_at * 20000))], (early_return and early_return[-1]) or len(counter))[-1]for current_position, counter, early_return in [([500 , 0], [], [])]][0])[-1] for cave in [[([((x == 0) and caver.append([]), ((y == 0 and x == 500) and caver[-1].append('+')) or caver[-1].append('.')) for y in range(abyss_starts_at+1) for x in range(2000)], caver)[-1] for caver in [[]]][0]]][0] for abyss_starts_at in [max([j[1] for i in rocks for j in i]) + 1]][0] for rocks in [[[(int(coords.split(",")[0]), int(coords.split(",")[1])) for coords in row.split(" -> ")] for row in open("input.txt", "r").read().split("\n")]]][0])