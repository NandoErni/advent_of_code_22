print("Part one:", sum([((lambda a:lambda v, v2:a(a,v, v2))(lambda s, p1, p2: [([(isinstance(p1[yob], int) and isinstance(p2[yob], int) and ((not return_value and p1[yob] < p2[yob]) and return_value.append(1), (not return_value and p1[yob] > p2[yob]) and return_value.append(-1)), isinstance(p1[yob], int) and isinstance(p2[yob], list) and (not return_value and s(s, [p1[yob]], p2[yob]) != 0) and return_value.append(s(s, [p1[yob]], p2[yob])), isinstance(p1[yob], list) and isinstance(p2[yob], int) and (not return_value and s(s, p1[yob], [p2[yob]]) != 0) and return_value.append(s(s, p1[yob], [p2[yob]])), isinstance(p1[yob], list) and isinstance(p2[yob], list) and (not return_value and s(s, p1[yob], p2[yob]) != 0) and return_value.append(s(s, p1[yob], p2[yob]))) for yob in range(min(len(p1), len(p2)))], ((return_value) and return_value[-1]) or (len(p1) < len(p2)) + -(len(p1) > len(p2)))[1] for return_value in [list()]][0])(p1, p2) == 1) * i for i, (p1, p2) in enumerate([tuple(map(eval, p.split("\n"))) for p in  open('input.txt').read().split('\n\n')], start=1)]))
print("Part two:", [([(value == [[2]] or value == [[6]]) and multi.append(multi[-1] * i) for i, value in enumerate([([((lambda a:lambda v, v2:a(a,v, v2))(lambda s, p1, p2: [([(isinstance(p1[yob], int) and isinstance(p2[yob], int) and ((not return_value and p1[yob] < p2[yob]) and return_value.append(1), (not return_value and p1[yob] > p2[yob]) and return_value.append(-1)), isinstance(p1[yob], int) and isinstance(p2[yob], list) and (not return_value and s(s, [p1[yob]], p2[yob]) != 0) and return_value.append(s(s, [p1[yob]], p2[yob])), isinstance(p1[yob], list) and isinstance(p2[yob], int) and (not return_value and s(s, p1[yob], [p2[yob]]) != 0) and return_value.append(s(s, p1[yob], [p2[yob]])), isinstance(p1[yob], list) and isinstance(p2[yob], list) and (not return_value and s(s, p1[yob], p2[yob]) != 0) and return_value.append(s(s, p1[yob], p2[yob]))) for yob in range(min(len(p1), len(p2)))], ((return_value) and return_value[-1]) or (len(p1) < len(p2)) + -(len(p1) > len(p2)))[1] for return_value in [list()]][0])(my_list[j], my_list[j + 1]) == -1) and my_list.insert(j, my_list.pop(j + 1)) for i in range(len(my_list)) for j in range(len(my_list) - i - 1)], my_list)[-1] for my_list in [[eval(p) for p in open('input.txt').read().replace("\n\n", "\n").split('\n')] + [[[2]], [[6]]]]][0], start=1)], multi[-1])[-1] for multi in [[1]]][0])