print("Part one:", [sum([all([val < tree_map[i][j] for val in tree_map[i][:j]]) or all([val < tree_map[i][j] for val in tree_map[i][j + 1:]]) or all([val < tree_map[i][j] for val in [row[j] for row in tree_map][:i]]) or all([val < tree_map[i][j] for val in [row[j] for row in tree_map][i + 1:]]) for i in range(1, len(tree_map)-1) for j in range(1, len(tree_map)-1)]) + 4 * len(tree_map) - 4 for tree_map in [[list(map(int, row)) for row in open("input.txt", "r").read().split("\n")]]][0])
print("Part two:", max([[[([(tree >= tree_map[i][j]) and indices.append(idx) for idx, tree in enumerate(tree_map[i][j + 1:], start=1)], len(tree_map[i][j + 1:]) and ((len(indices) and indices[0]) or len(tree_map[i][j + 1:])))[1] for indices in [[]]][0] * [([(tree >= tree_map[i][j]) and indices.append(idx) for idx, tree in enumerate(tree_map[i][j-1::-1], start=1)], len(tree_map[i][j-1::-1]) and ((len(indices) and indices[0]) or len(tree_map[i][j-1::-1])))[1] for indices in [[]]][0] * [([(tree >= tree_map[i][j]) and indices.append(idx) for idx, tree in enumerate([row[j] for row in tree_map][i-1::-1], start=1)], len([row[j] for row in tree_map][i-1::-1]) and ((len(indices) and indices[0]) or len([row[j] for row in tree_map][i-1::-1])))[1] for indices in [[]]][0] * [([(tree >= tree_map[i][j]) and indices.append(idx) for idx, tree in enumerate([row[j] for row in tree_map][i + 1:], start=1)], len([row[j] for row in tree_map][i + 1:]) and ((len(indices) and indices[0]) or len([row[j] for row in tree_map][i + 1:])))[1] for indices in [[]]][0] for i in range(len(tree_map)) for j in range(len(tree_map))] for tree_map in [[list(map(int, row)) for row in open("input.txt", "r").read().split("\n")]]][0]))