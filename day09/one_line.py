print("Part one:", [([(tail_positions.add((rope[-1][0][-1], rope[-1][1][-1])), (move == "D" and (rope[0][1].append(rope[0][1][-1] - 1) or True)) or (move == "U" and (rope[0][1].append(rope[0][1][-1] + 1) or True)) or (move == "L" and (rope[0][0].append(rope[0][0][-1] - 1) or True)) or (move == "R" and (rope[0][0].append(rope[0][0][-1] + 1) or True)), [((abs(rope[i-1][0][-1] - rope[i][0][-1]) <= 1 and abs(rope[i-1][1][-1] - rope[i][1][-1]) <= 1) or (rope[i-1][0][-1] == rope[i][0][-1] and (rope[i][1].append(rope[i][1][-1] + sign(rope[i-1][1][-1] - rope[i][1][-1])) or True)) or (rope[i-1][1][-1] == rope[i][1][-1] and (rope[i][0].append(rope[i][0][-1] + sign(rope[i-1][0][-1] - rope[i][0][-1])) or True)) or ((abs(rope[i-1][0][-1] - rope[i][0][-1]) == 2 or abs(rope[i-1][1][-1] - rope[i][1][-1]) == 2) and ((rope[i][0].append(rope[i][0][-1] + sign(rope[i-1][0][-1] - rope[i][0][-1])), rope[i][1].append(rope[i][1][-1] + sign(rope[i-1][1][-1] - rope[i][1][-1]))) or True))) for i in range(1, len(rope))]) for move in [item for sublist in [[i] * int(j) for i, j in [row.split(" ") for row in open("input.txt", "r").read().split("\n")]] for item in sublist]], tail_positions.add((rope[-1][0][-1], rope[-1][1][-1])), len(tail_positions))[2] for rope, sign, tail_positions in [([[[0], [0]] for _ in range(2)], lambda x: x / abs(x), set())]][0])
print("Part two:", [([(tail_positions.add((rope[-1][0][-1], rope[-1][1][-1])), (move == "D" and (rope[0][1].append(rope[0][1][-1] - 1) or True)) or (move == "U" and (rope[0][1].append(rope[0][1][-1] + 1) or True)) or (move == "L" and (rope[0][0].append(rope[0][0][-1] - 1) or True)) or (move == "R" and (rope[0][0].append(rope[0][0][-1] + 1) or True)), [((abs(rope[i-1][0][-1] - rope[i][0][-1]) <= 1 and abs(rope[i-1][1][-1] - rope[i][1][-1]) <= 1) or (rope[i-1][0][-1] == rope[i][0][-1] and (rope[i][1].append(rope[i][1][-1] + sign(rope[i-1][1][-1] - rope[i][1][-1])) or True)) or (rope[i-1][1][-1] == rope[i][1][-1] and (rope[i][0].append(rope[i][0][-1] + sign(rope[i-1][0][-1] - rope[i][0][-1])) or True)) or ((abs(rope[i-1][0][-1] - rope[i][0][-1]) == 2 or abs(rope[i-1][1][-1] - rope[i][1][-1]) == 2) and ((rope[i][0].append(rope[i][0][-1] + sign(rope[i-1][0][-1] - rope[i][0][-1])), rope[i][1].append(rope[i][1][-1] + sign(rope[i-1][1][-1] - rope[i][1][-1]))) or True))) for i in range(1, len(rope))]) for move in [item for sublist in [[i] * int(j) for i, j in [row.split(" ") for row in open("input.txt", "r").read().split("\n")]] for item in sublist]], tail_positions.add((rope[-1][0][-1], rope[-1][1][-1])), len(tail_positions))[2] for rope, sign, tail_positions in [([[[0], [0]] for _ in range(10)], lambda x: x / abs(x), set())]][0])